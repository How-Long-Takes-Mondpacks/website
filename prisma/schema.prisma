generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Editor
  User
  SuperAdmin
  Public
}

model User {
  id                     String          @id @default(auto()) @map("_id") @db.ObjectId
  username               String?
  avatar                 String?
  discriminator          String?
  flags                  Int?
  banner                 String?
  public_flags           Int?
  accent_color           Int?
  avatar_decoration_data String?
  banner_color           String?
  clan                   String?
  primary_guild          String?
  mfa_enabled            Boolean?
  locale                 String?
  premium_type           Int?
  verified               Boolean?
  global_name            String?
  name                   String?
  email                  String?         @unique
  hashedPassword         String?
  emailVerified          DateTime?
  image                  String?
  role                   Role            @default(User)
  accounts               Account[]
  modpackTimings         ModpackTiming[]
  sessions               Session[]
  authenticators         Authenticator[]
  lastActive             DateTime? // Added for analytics

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transforts           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, credentialID])
}

enum CompletionUnit {
  second
  minute
  hour
  day
  month
  year
}

model ModpackTiming {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  modpackId Int

  mainProgressTime Int
  mainProgressUnit CompletionUnit @default(hour)

  platinumTime Int?
  platinumunit CompletionUnit?

  realTimeSpent Int
  realTimeSpentUnit CompletionUnit @default(hour)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, id])
}
